{"ast":null,"code":"var _class;\nimport { saveAs } from 'file-saver';\nimport { HttpEventType } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./file.service\";\nexport class AppComponent {\n  constructor(fileService) {\n    this.fileService = fileService;\n    this.filenames = [];\n    this.fileStatus = {\n      status: '',\n      requestType: '',\n      percent: 0\n    };\n  }\n  // define a function to upload files\n  onUploadFiles(files) {\n    const formData = new FormData();\n    for (const file of files) {\n      formData.append('files', file, file.name);\n    }\n    this.fileService.upload(formData).subscribe(event => {\n      console.log(event);\n      this.resportProgress(event);\n    }, error => {\n      console.log(error);\n    });\n  }\n  // define a function to download files\n  onDownloadFile(filename) {\n    this.fileService.download(filename).subscribe(event => {\n      console.log(event);\n      this.resportProgress(event);\n    }, error => {\n      console.log(error);\n    });\n  }\n  resportProgress(httpEvent) {\n    switch (httpEvent.type) {\n      case HttpEventType.UploadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total, 'Uploading... ');\n        break;\n      case HttpEventType.DownloadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total, 'Downloading... ');\n        break;\n      case HttpEventType.ResponseHeader:\n        console.log('Header returned', httpEvent);\n        break;\n      case HttpEventType.Response:\n        if (httpEvent.body instanceof Array) {\n          this.fileStatus.status = 'done';\n          for (const filename of httpEvent.body) {\n            this.filenames.unshift(filename);\n          }\n        } else {\n          saveAs(new File([httpEvent.body], httpEvent.headers.get('File-Name'), {\n            type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`\n          }));\n          // saveAs(new Blob([httpEvent.body!],\n          //   { type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`}),\n          //    httpEvent.headers.get('File-Name'));\n        }\n\n        this.fileStatus.status = 'done';\n        break;\n      default:\n        console.log(httpEvent);\n        break;\n    }\n  }\n  updateStatus(loaded, total, requestType) {\n    this.fileStatus.status = 'progress';\n    this.fileStatus.requestType = requestType;\n    this.fileStatus.percent = Math.round(100 * loaded / total);\n  }\n}\n_class = AppComponent;\n_class.ɵfac = function AppComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FileService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-root\"]],\n  decls: 2,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h4\");\n      i0.ɵɵtext(1, \"hello\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["saveAs","HttpEventType","AppComponent","constructor","fileService","filenames","fileStatus","status","requestType","percent","onUploadFiles","files","formData","FormData","file","append","name","upload","subscribe","event","console","log","resportProgress","error","onDownloadFile","filename","download","httpEvent","type","UploadProgress","updateStatus","loaded","total","DownloadProgress","ResponseHeader","Response","body","Array","unshift","File","headers","get","Math","round","i0","ɵɵdirectiveInject","i1","FileService","selectors","decls","vars","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\diemn02\\Downloads\\uploadanddownload\\src\\app\\app.component.ts","C:\\Users\\diemn02\\Downloads\\uploadanddownload\\src\\app\\app.component.html"],"sourcesContent":["import { FileService } from './file.service';\nimport { Component } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { HttpErrorResponse, HttpEvent, HttpEventType } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  filenames: string[] = [];\n  fileStatus = { status: '', requestType: '', percent: 0 };\n\n  constructor(private fileService: FileService){}\n\n  // define a function to upload files\n  onUploadFiles(files: File[]): void {\n    const formData = new FormData();\n    for (const file of files) { formData.append('files', file, file.name); }\n    this.fileService.upload(formData).subscribe(\n      event => {\n        console.log(event);\n        this.resportProgress(event);\n      },\n      (error: HttpErrorResponse) => {\n        console.log(error);\n      }\n    );\n  }\n\n  // define a function to download files\n  onDownloadFile(filename: string): void {\n    this.fileService.download(filename).subscribe(\n      event => {\n        console.log(event);\n        this.resportProgress(event);\n      },\n      (error: HttpErrorResponse) => {\n        console.log(error);\n      }\n    );\n  }\n  private resportProgress(httpEvent: HttpEvent<string[] | Blob>): void {\n    switch(httpEvent.type) {\n      case HttpEventType.UploadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total!, 'Uploading... ');\n        break;\n      case HttpEventType.DownloadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total!, 'Downloading... ');\n        break;\n      case HttpEventType.ResponseHeader:\n        console.log('Header returned', httpEvent);\n        break;\n      case HttpEventType.Response:\n        if (httpEvent.body instanceof Array) {\n          this.fileStatus.status = 'done';\n          for (const filename of httpEvent.body) {\n            this.filenames.unshift(filename);\n          }\n        } else {\n          saveAs(new File([httpEvent.body!], httpEvent.headers.get('File-Name')!,\n                  {type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`}));\n          // saveAs(new Blob([httpEvent.body!],\n          //   { type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`}),\n          //    httpEvent.headers.get('File-Name'));\n        }\n        this.fileStatus.status = 'done';\n        break;\n        default:\n          console.log(httpEvent);\n          break;\n\n    }\n  }\n\n  private updateStatus(loaded: number, total: number, requestType: string): void {\n    this.fileStatus.status = 'progress';\n    this.fileStatus.requestType = requestType;\n    this.fileStatus.percent = Math.round(100 * loaded / total);\n  }\n}\n","<h4>hello</h4>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}